{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Justin\\\\Documents\\\\GitHub\\\\CECS-443-\\\\src\\\\components\\\\polling.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport \"./poll.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction StrawPoll() {\n  _s();\n  const [voteData, setVoteData] = useState();\n  const [totalVotes, setTotalVotes] = useState(0);\n  const [voted, setVoted] = useState(false);\n  const url = \"http://localhost:3000/poll\";\n  useEffect(() => {\n    fetch(url).then(response => response.json()).then(data => {\n      setVoteData(data);\n      let sum = 0;\n      data.forEach(function (obj) {\n        sum += obj.votes;\n      });\n      setTotalVotes(sum);\n    });\n  }, []);\n  const submitVote = e => {\n    if (voted === false) {\n      const voteSelected = e.target.dataset.id;\n      const voteCurrent = voteData[voteSelected].votes;\n      voteData[voteSelected].votes = voteCurrent + 1;\n      setTotalVotes(totalVotes + 1);\n      setVoted(!voted);\n      const options = {\n        method: \"POST\",\n        body: JSON.stringify(voteData),\n        headers: {\n          \"Content-Type\": \"application/json\"\n        }\n      };\n      fetch(url, options).then(res => res.json()).then(res => console.log(res));\n    }\n  };\n  let pollOptions;\n  if (voteData) {\n    pollOptions = voteData.map(item => {\n      return /*#__PURE__*/_jsxDEV(\"li\", {\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: submitVote,\n          \"data-id\": item.id,\n          children: [item.option, /*#__PURE__*/_jsxDEV(\"span\", {\n            children: [\"- \", item.votes, \" Votes\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 49,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 47,\n          columnNumber: 11\n        }, this)\n      }, item.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 9\n      }, this);\n    });\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"poll\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Which option do you like the best?\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      className: voted ? \"results\" : \"options\",\n      children: pollOptions\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Total Votes: \", totalVotes]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 57,\n    columnNumber: 5\n  }, this);\n}\n_s(StrawPoll, \"TtS2UO4u3AczXvOfm8ri07NgsCU=\");\n_c = StrawPoll;\nexport default StrawPoll;\nvar _c;\n$RefreshReg$(_c, \"StrawPoll\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","StrawPoll","_s","voteData","setVoteData","totalVotes","setTotalVotes","voted","setVoted","url","fetch","then","response","json","data","sum","forEach","obj","votes","submitVote","e","voteSelected","target","dataset","id","voteCurrent","options","method","body","JSON","stringify","headers","res","console","log","pollOptions","map","item","children","onClick","option","fileName","_jsxFileName","lineNumber","columnNumber","className","_c","$RefreshReg$"],"sources":["C:/Users/Justin/Documents/GitHub/CECS-443-/src/components/polling.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport \"./poll.css\";\r\n\r\nfunction StrawPoll() {\r\n\r\n  const [voteData, setVoteData] = useState();\r\n  const [totalVotes, setTotalVotes] = useState(0);\r\n  const [voted, setVoted] = useState(false);\r\n\r\n  const url = \"http://localhost:3000/poll\";\r\n  useEffect(() => {\r\n    fetch(url)\r\n      .then((response) => response.json())\r\n      .then((data) => {\r\n        setVoteData(data);\r\n        let sum = 0;\r\n        data.forEach(function (obj) {\r\n          sum += obj.votes;\r\n        });\r\n        setTotalVotes(sum);\r\n      });\r\n  }, []);\r\n\r\n  const submitVote = (e) => {\r\n    if(voted === false) {\r\n      const voteSelected = e.target.dataset.id;\r\n      const voteCurrent = voteData[voteSelected].votes;\r\n      voteData[voteSelected].votes = voteCurrent + 1;\r\n      setTotalVotes(totalVotes + 1);\r\n      setVoted(!voted);\r\n      const options = {\r\n        method: \"POST\",\r\n        body: JSON.stringify(voteData),\r\n        headers: { \"Content-Type\": \"application/json\" },\r\n      };\r\n      fetch(url, options)\r\n        .then((res) => res.json())\r\n        .then((res) => console.log(res));\r\n    }\r\n  };  \r\n\r\n  let pollOptions;\r\n  if (voteData) {\r\n    pollOptions = voteData.map((item) => {\r\n      return (\r\n        <li key={item.id}>\r\n          <button onClick={submitVote} data-id={item.id}>\r\n            {item.option}\r\n            <span>- {item.votes} Votes</span>\r\n          </button>          \r\n        </li>\r\n      );\r\n    });\r\n  }  \r\n\r\n  return (\r\n    <div className=\"poll\">\r\n      <h1>Which option do you like the best?</h1>\r\n      <ul className={voted ? \"results\" : \"options\"}>{pollOptions}</ul>\r\n      <p>Total Votes: {totalVotes}</p>\r\n    </div>\r\n  );\r\n  \r\n}\r\n\r\nexport default StrawPoll;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}